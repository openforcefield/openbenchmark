
"""
Top-level `openff-benchmark` cli entrypoint.
"""

import click

from openff.benchmark.utils.validate_and_assign_ids import validate_and_assign


@click.group()
def cli():
    pass

@cli.group()
def validate():
    pass

@validate.command()
@click.option('--input_graph_molecules',
              default='',
              help="SDF file(s) to read containing molecules to put through the standard benchmarking workflow. 3D conformers in this file will be ignored and the molecule graph/connectivity will be used to generate conformers for these molecules.")

@click.option('--input_3d_molecules',
              default='',
              help='SDF file(s) to read containing input molecules in specific geometries. This argument should be included if there are particular low-energy conformers that naive conformer generation may not find.')

@click.option('--output_directory',
              default='1-validate_and_assign', 
              help='Directory to put output files. If this directory does not exist, one will be created.')

@click.option('--group_name',
              help='Group name for assigning IDs to the molecules.')
def doit(input_graph_molecules,
         input_3d_molecules,
         output_directory,
         group_name):
    """
    This script preprocesses, validates, and creates a naming system for molecles that will be submitted to the benchmarking workflow. 
    For each unique molecule, up to ten total conformers will be generated by the benchmarking workflow.\n
    This script takes two forms of molecule inputs:\n
        1) "Graph Molecules", the "normal" input type where the geometry of the input molecule will NOT be passed to subsequent steps, and instead all conformers of the molecule will be generated by RDKit.\n
        2) "3D Molecules", where one or more specific geometries are provided, and the rest are generated by RDKit. 
    """
    validate_and_assign(input_molecules,
                        input_conformers,
                        output_directory,
                        group_name)
    
if __name__ == "__main__":
    cli()
